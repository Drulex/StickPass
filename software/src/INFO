USEFUL INFO

USB COMMUNICATIONS
==================

1.  Host opens USB device
        a.  Loops through all usb devices
        b.  Checks vendor ID and name
        c.  Checks product ID and name
        d.  Return usb_dev_handle if match is found

2.  Host sends USB requests (CONTROL_IN) to target using usbRequest_t structure defined in usbdrv/usbdrv.h.

3.  V-USB library automatically calls usbFunctionSetup() method when it receives vendor-specific control messages.
    There are 2 ways of returning data to host:
        a.  Set the global pointer usbMsgPtr to a (static RAM) memory block and return the length of data from the function
        b.  Return USB_NO_MSG in 'usbFunctionSetup()'. The driver will then call 'usbFunctionRead() when data is needed.
            (this means we have to implement usbFunctionRead)



EEPROM READING & WRITING
========================

1. EEMEM attribute instructs compiler to assign variable into EEPROM space

/* example code below */

#include <avr/eeprom.h>

uint8_t  EEMEM NonVolatileChar;
uint16_t EEMEM NonVolatileInt;
uint8_t  EEMEM NonVolatileString[10];

int main(void)
{
    uint8_t  SRAMchar;
    uint16_t SRAMint;
    uint8_t  SRAMstring[10];

    SRAMchar = eeprom_read_byte(&NonVolatileChar);
    SRAMint  = eeprom_read_word(&NonVolatileInt);
    eeprom_read_block((void*)SRAMstring, (const void*)NonVolatileString, 10);
}

2. Use of PROGMEM to save RAM and store some info in flash memory instead.
